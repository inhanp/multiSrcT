00. Software Engineering Aspect
    - Compile : SW 덩어리들을 "각각" source code 에서 machine code (object code) 로 바꾼다 (덩어리 단위: .h, .c). 이것을 library 라 부른다.
    - Link : Library 덩어리들을 main code 와 연결 (link) 하여 합쳐서, executable code 를 만든다.
    - Load : 실행을 할 수 있도록, process 단위로 physical memory 에 배치 (loading) 시켜준다
    - Run : User-Kernel Mode 를 반복하며 memory 에 있는 process 들을 실행한다 (job control)
  
00. Library 를 사용하면 편리한 점
    - Library 는 program 을 구성하는 조각들을 비슷한 것들끼리 모아서 나누어 관리하는 방법이다. (이 모음을 API 라고도 부른다)
    - 모음별로 compile 하여 object code (machine code) 를 만들어 놓고 Link 때 합치면 된다.
    - Debugging 이나 upgrade 를 할때 해당되는 조각의 모임만 수정하고 compile 하면 된다. 다른 부분은 object code 를 다시 만들지 않아도 된다.

00. Library 의 종류
    - static : object file(.o로 끝나는) 의 단순한 모음이다. 이 모음의 이름은 보통 .a 의 확장자를 가진다. Executable code 를 만들때 포함 시킨다
        (Executable code 를 10만명에게 배포했는데, 보안 문제로 library 에 수정할 부분이 생기면 어떻게 될까?)
    - shared : program 이 시작될때 loading 되고, loading 된 후에는 이후의 다른 program 들도 같이 사용할 수 있다. static 보다 1-5% 정도 느려질수 있다.
    - dynamic : program 시작 중 특정한때에 loading 하는, plug-in module 등이다. 설정 file 등에서 유연하게 작동할 수 있다.

00. Static Library 만들기
    - 단순히 오브젝트(.o)들의 모임이다. 오브젝트를 만든다음에 ar 이라는 명령을 이용해서 라이브러리 아카이브를 만들면 된다.

        [root@localhost test]# gcc -c ihLib.c  // '-c' option 은 compile 만 하고 linking 안함
        [root@localhost test]# ar rc libjhih.a ihLib.o

    - 단지 ar 에 몇가지 옵션만을 이용해서 libmysum 이란 라이 브러리를 만들었다. 'r' 은 libmysum.a 라는 라이브러리 아카이브에 새로운 오브젝트를 추가할것이라는 옵션이다. 'c' 는 아카이브가 존재하지 않을경우 생성하라는 옵션이다.

    - 위의 프로그램을 컴파일 하기 위해서는 라이브러리의 위치와 어떤 라이브러리를 사용할것인지를 알려줘야 한다. 라이브러리의 위치는 '-L' 옵션을 이용해서 알려줄수 있으며, '-l' 옵션을 이용해서 어떤 라이브러리를 사용할것인지를 알려줄수 있다. -l 뒤에 사용될 라이브러리 이름은 라이브러리의 이름에서 "lib"와 확장자 "a"를 제외한 나머지 이름이다. 즉 libmysum.a 를 사용할 것이라면 "-lmysum" 이 될것이다.

    - "nm libjhih.a" 로 안에 있는 library 들을 확인 가능

        [root@localhost test]# gcc -o multiSrcT multiSrcT.c -L./ -lmysum

    - 만약 우리가 사용할 라이브러리가 표준 라이브러리 디렉토리경로에 있다면 -L 을 사용하지 않아도 된다. 표준라이브러리 디렉토리 경로는 /etc/ld.so.conf 에 명시되어 있다. 정적라이브러리 상태로 컴파일한 프로그램의 경우 컴파일시에 라이브러리가 포함되므로 라이브러리를 함께 배포할 필요는 없다.

00. 